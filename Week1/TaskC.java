/*
–ú–ï–ù–¨–®–ò–ï –ò–õ–ò –†–ê–í–ù–´–ï


–í–∞–º –∑–∞–¥–∞–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª–∏–Ω—ã ùëõ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ùëò. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ —Å–æ—Å—Ç–æ–∏—Ç –≤ —Ç–æ–º, —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–∏ –ª—é–±–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ùë• –∏–∑ –æ—Ç—Ä–µ–∑–∫–∞ [1;109] (—Ç–æ –µ—Å—Ç—å 1‚â§ùë•‚â§109) —Ç–∞–∫–æ–µ, —á—Ç–æ —Ä–æ–≤–Ω–æ ùëò —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞–¥–∞–Ω–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–µ–Ω—å—à–µ –ª–∏–±–æ —Ä–∞–≤–Ω—ã ùë•.
–ó–∞–º–µ—Ç—å—Ç–µ, —á—Ç–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã.
–ï—Å–ª–∏ –∏—Å–∫–æ–º–æ–≥–æ ùë• –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã–≤–µ–¥–∏—Ç–µ ¬´-1¬ª (–±–µ–∑ –∫–∞–≤—ã—á–µ–∫).

–ü—Ä–∏–º–µ—Ä:
7 4
3 7 5 1 10 3 20
–û—Ç–≤–µ—Ç: 6
*/
import java.util.Scanner;
import java.util.Arrays;

public class Task1C {

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        int n = input.nextInt();
        int k = input.nextInt();
        long x = -1;

        if (n <= 0 | k < 0) System.out.println(-1);
        else {
            int[] numbers = new int[n];

            for (int i = 0; i < n; i++) {
                numbers[i] = input.nextInt();
            }

            Arrays.sort(numbers);
            // if (numbers[0] != 1 && k == 0) x = numbers[0];
            if (k == 0) {
                if (numbers[0] != 1) x = 1;
            } else {
                if (k == n) x = numbers[n-1];
                if (k < n) {
                    if (isUniq(numbers) && numbers[k-1] != numbers[k]) x = numbers[0];
                    else {
                        if (numbers[k-1] != numbers[k]) x = numbers[k-1];
                    }
                }

            }
            if ((1 <= x ) && ( x <= 1000000000)) System.out.println(x);
            else System.out.println(-1);
        }
    }

    public static boolean isUniq(int[] arr) {
        for (int i = 1; i < arr.length; i++) {
            if (arr[i] != arr[i-1]) return false;
        }
        return true;
    }
}
